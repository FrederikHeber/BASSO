////
#  Project: BASSO - BAnach Sequential Subspace Optimizer
#  Description: C++ library for solving optimization problems in Banach spaces
#  Copyright (C)  2016-2019 Frederik Heber. All rights reserved.
#
#
#    This file is part of the BASSO library.
#
#     BASSO is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 2 of the License, or
#     (at your option) any later version.
#
#     BASSO is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with BASSO.  If not, see <http://www.gnu.org/licenses/>.
#
////

[[reference]]
Reference
---------

In this reference we explain how the major interface classes are used.

[[reference.NormedSpace]]
=== NormedSpace and NormedSpaceFactory

A finite-dimensional (Banach) space is instantiated using the `NormedSpace`
class by giving its constructor the dimension of the space and a norm object,
`NormedSpace X(200, norm);``

However, a norm cannot be constructed without a space. Both are tightly
interlinked in BASSO (through `boost::shared_ptr`). Hence, the typical way of
setting up a space is by using the `NormedSpaceFactory`:

[source,{basebackend@docbook:C++:cpp}]
------------
#include "Minimizations/InverseProblems/InverseProblems/Factory.hpp"
#include "Minimizations/Space/NormedSpaceFactory.hpp"

InverseProblemFactory::args_t args_SpaceX;
args_SpaceX += boost::any(1.1), boost::any(2.);
NormedSpace__ptr_t X = NormedSpaceFactory::create(200, "lp", args_SpaceX);
------------

Here, we need to specify not only the dimension but also the properties of the
norm. We set the type of the norm to be "lp" (or "regularized_l1"), see the
static function `NormFactory::getMap()` for all options.

Moreover, we need to give the space's parameters. An lp-space needs the value of
p and also the power type to create the associated duality mapping. As the
number of parameters differ over the different available norms, they are given
as a vector of `boost::any` arguments. Here, we set p to 1.1 and the power type
to 2.

Finally, the `NormedSpaceFactory::create()` function returns the constructed
instance of the `NormedSpace` class. Note that it is wrapped in a
`boost:shared_ptr` and is deconstructed automatically when it is no longer used.
In other words, don't worry about it, just use it like a static instance except
you need to dereference it using the `*` operator on use. Hence, the type has
been kept the `.._ptr_t` ending to remind you that you need to access its
members like `X->getNorm()`, i.e. like a normal pointer.

[[reference.SpaceElement]]
=== SpaceElement

The `SpaceElement` class wraps a `Eigen::VectorXd` and associates it directly
with a certain space, see `getSpace()`. All typical linear algebra routines such
as vector product, scalar product, addition, ... can be found in this class.

Let us give a few example calls that should be self-explanatory.

[source,{basebackend@docbook:C++:cpp}]
------------
#include <iostream>
#include "Elements/SpaceElement.hpp"
#include "Norms/Norm.hpp"

SpaceElement_ptr_t x,y;

// linear algebra
const double scalar_product = (*x)#  (*y);
SpaceElement_ptr_t scalar_multiplication = 5.#  (*x);
SpaceElement_ptr_t addition = (*x) + (*y);
const double norm = (*x->getSpace()->getNorm())(x);

// access components
(*x)[5] = 5.;
x->setZero();

// comparators
const bool equality = (*x) == (*y);
// don't; x == y (this compares the addresses in memory)

// print element
std::cout <<
------------

The association with the space prevents use in other spaces even if they share
the number of degrees of freedom.

[[reference.Norm]]
=== Norm

A norm basically has the single function to return the "norm" of a given
element. The `Norm` associated with a space makes it a `NormedSpace`, see
`getSpace()`.

Note that certain norms cause spaces to be smooth or not. Hence, the norm can
be queried for `isSmooth()`.

`Norm` only defines the general interface. Specializations are `LpNorm`,
`L1Norm`, `LInfinityNorm` that implement the specific norm function to use.

Norms throw an `NormIllegalValue_exception` when they are called with a
parameter outside expected intervals, e.g. an illegal p value such as -1.

[[reference.Mapping]]
=== Mapping

Similar to `Norm`, `Mapping` defines the general interface of a function that
maps an element from one `NormedSpace` onto another `NormedSpace` instance,
see `getSourceSpace()` and `getTargetSpace()`.
Therefore, its constructor requires a source and a target space instance.

An example of such a mapping is the `LinearMapping`. This is a specialization
that implements a multiplication with a matrix associated with the mapping.

[source,{basebackend@docbook:C++:cpp}]
------------
#include "Elements/SpaceElement.hpp"
#include "Mappings/LinearMappingFactory.hpp"

NormedSpace_ptr_t X, Y;
SpaceElement_ptr_t x;
Eigen::MatrixXd matrix; // given from outside

LinearMapping_ptr_ A = LinearMappingFactory:create(X,Y, matrix);

SpaceElement_ptr_t y = (*A)(x);
------------

Its `operator()` then performs the actual mapping, taking a `SpaceElement` from
the source space `X`, performing alterations on the element's components, and
returning a `SpaceElement` in the target space `Y`.

A more complicated example for using the factory is as follows where we have two
matrices whose product forms the actual linear mapping.

[source,{basebackend@docbook:C++:cpp}]
------------
#include <cassert>
#include "Elements/SpaceElement.hpp"
#include "Mappings/LinearMappingFactory.hpp"
#include "Spaces/NormedSpace.hpp"

NormedSpace_ptr_t X, Y; // instantiated before
SpaceElement_ptr_t x;   // instantiated before, associated with X
assert ( x->getSpace() == X );
Eigen::MatrixXd factor_one; // given from outside
Eigen::MatrixXd factor_two; // given from outside

LinearMapping_ptr_ A = LinearMappingFactory:createTwoFactorInstance(
    X,Y, factor_one, factor_two);

SpaceElement_ptr_t y = (*A)(x);
------------

WARNING: Take care that the matrix dimensions match. Otherwise, an assertion is
thrown.

TIP: A linear mapping can be decomposed into an singular value decomposition,
see `LinearMapping::getSVD()` and `SingularValueDecomposition`.

Moreover, `DualityMapping` is another example of a `Mapping`. There, the
constructor only needs a single space as each space knows about its dual space
and this mapping always maps into the dual space. In the folder
'Mappings/Specifics' specific implementations of duality mapping, such as the
one in lp-spaces, are contained.

Both these classes have specific factory classes, namely `LinearMappingFactory`
and `DualityMappingFactory` to create the respective instance types. These
factories are also used internally, e.g., when constructing the space with its
dual space and the associated duality mappings that all have to be interlinked.
To this end, these accept "weak" `NormedSpace` ptr instances.

Finally, each mapping is inherently associated with an adjoint mapping. For
`LinearMapping` this would be the transposed of a (real-value) matrix.

[[reference.Functions]]
=== Functions

Functions are similar to `Mappings` and to `Norms`. They take one or two
arguments being `SpaceElement` instances and produce a real value.

- `BregmanDistance`: calculates the Bregman distance between two elements of the
same space.

- `ResidualFunctional`: calculates the residual latexmath:[$|Ax-y|$].

- `SmoothnessFunctional`: calculates the modulus of smoothnes with a specific
lambda.

- `SmoothnessModulus`: calculates the modulus of smoothness.

- `VectorProjection`: calculates the projection of one element onto another.

Let us give an example using the `BregmanDistance`.

[source,{basebackend@docbook:C++:cpp}]
------------
#include "Minimizations/Elements/SpaceElement.hpp"
#include "Minimizations/Functions/BregmanDistance.hpp"
#include "Minimizations/Mappings/DualityMapping.hpp"

Norm_ptr_t norm; // instantiated before, e.g. Space::getNorm()
DualityMapping_ptr_t J_p; // instantiated before, e.g. Space::getDualityMapping()
BregmanDistance delta(norm, J_p, J_p->getPower());

SpaceElement_ptr_t x,y; // instantiated before

const double bregman_distance = delta(x,y);
------------

Some functions are used solely internally, namely for minimization.

- `BregmanProjectionFunctional`

- `MetricProjectionFunctional`

- `VectorProjection_BregmanDistanceToLine`

[[reference.MatrixIO]]
=== MatrixIO

`MatrixIO` is a namespace wherein several helper functions are gathered that
read or write matrix from or to files. Moreover, there are helper functions to
print matrices to output streams.

NOTE: We use the Matlab/Octave text format to read and write matrices. This
can be easily extended to also parse binary formats.

[source,{basebackend@docbook:C++:cpp}]
------------
#include <Eigen/Dense>
#include "MatrixIO/MatrixIO.hpp"

Eigen::VectorXd solution;

// parse from Octave-style file
MatrixIO::parse("start_solution.m", "rhs", solution);

// write to Octave-style file
MatrixIO::store("solution.m", "rhs", solution);
------------

This will parse a vector from the file 'start_solution.m' into the
`Eigen::VectorXd` instance named `solution`. Here, *rhs* is used in error
messages when parsing, e.., when the file does not exist.
Similary, we write the vector into 'solution.m' from the same instance.

When writing `SpaceElement`s (instead of `Eigen::VectorXd`) we recommend using
the convenience class `SpaceElementWriter`.

[source,{basebackend@docbook:C++:cpp}]
------------
#include <fstream>
#include "Minimizations/Elements/SpaceElementIO.hpp"
SpaceElement_ptr_t solution;

// parse from file
std::ifstream ist("start_solution.m");
SpaceElementWriter::input(ist, solution);

// write to file
std::ofstream ost("solutionm.m");
SpaceElementWriter::output(ost, solution);
------------

[[reference.InverseProblem]]
=== InverseProblem

The `InverseProblem` class takes a mapping, two space instances, and a
right-hand side. It is simply a convenience struct that keeps all the necessary
references at hand, namely it constructs internal shorthand references to all
items required for the minimizations methods such as the dual spaces, the
adjoint mapping. Moreover, it contains the solution element to be found.

[[reference.Minimizers]]
=== Minimizers

Minimizers form the core of BASSO. They solve the minimizations problems that
produce solutions to inverse problems or split feasibility problems.

The general interface is defined in `GeneralMinimizer`. Its constructor takes
all controlling parameters in the form of `CommandLineOptions` and moreover
an `InverseProblem` instance and a `Database` whereto iteration-related
information is stored.
Its `operator()` expects the inverse problem (as you may change the matrix A
and the right), a starting value together with its dual starting value and a
possibly known solution to calculate the Bregman distance to it.

The following minimizers are implemented:

- `LandweberMinimizer`
+
The Landweber method is the traditional method of inverse problems for which
strong convergence was shown first. In practice, it is known to converge very
slowly. This is especially true when a fixed step width is used. However, even
with a line search such as using Brent's method it is not competitive with the
other SESOP Minimizers. One advantage is naturally that it does not need any
derivative information, i.e. it works even when the space X is not smooth such
as in case of the latexmath:[\ell_1]-norm.
+
- `SequentialSubspaceMinimizer`
+
The Sequential Subspace Method (SESOP) is the main workhorse in BASSO. It can
employ multiple search directions that can even be made (g-)orthogonal in the
context of Banach space to speed up convergence. Note that SESOP is constrained
to uniformly smooth and convex Banach spaces, i.e. latexmath:[p \in (1,\infty)].
Current work is underway to extend to the uniformly convex Banach spaces.
+
- `SequentialSubspaceMinimizerNoise`
+
This is variant of SESOP with additional regularization. In other words, it may
be used for perturbed right-hand sides. Moreover, this variant is suited also
for non-linear minimization, see link:#Wald2017[[Wald2017]].

[NOTE]
======
Empirical tests have shown that multiple orthogonal search directions in
lp-spaces are only efficient for latexmath:[p>3]. If p is smaller only a single
search direction is recommended as more search directions just bring additional
complexity (because of the additional orthogonalization operations) but do not
increase convergence speed. See link:#Heber2019[[Heber2019]] for details.
======

These Minimizers may be cleanly instantiated using the `MinimizerFactory`.

An important point is how the step width is determined. This is especially
important for the `LandweberMinimizer`. There are several different variants
implemented. All of which can be easily accessed through the
`DetermineStepWidthFactory`.

The SESOP Minimizers determine the step width automatically through a line
search. However, this line search may be tuned to be only inexact by setting
appropriate Wolfe conditions.

All Minimizers write information about the iteration to tables of a database.
The `DatabaseManager` controls what values are written and how the tables are
set up.

[[reference.CommandLineOptions]]
=== CommandLineOptions

Many parameters that control how for example the minimization is performed
are wrapped in a class `CommandLineOptions`.

Let us briefly discuss what the class looks like and what it can do.

First of all, `CommandLineOptions` is basically a `struct` containing all sorts
of parameters that control what Banach spaces (and what norms) are employed,
what kind of Minimizer, what stopping criteria and so on.

Furthermore, the class has helper functions to quickly parse the state from
given command-line options. This explains the nature of its name.

Moreover, the class' state can be stored to a human-readable file using
`boost::serialization`. It is written as in the following example code.

[source,{basebackend@docbook:C++:cpp}]
--------
#include <boost/progam_options.hpp>
#include <fstream>
#include "Options/CommandLineOptions.hpp"

using namespace boost::program_options as po;

CommandLineOptions opts;

// write to file
std::ofstream config_file("config.cfg");
opts.store(config_file);

// read from file
std::ifstream config_file("config.cfg");
po::store(po::parse_config_file(config_file, opts.desc_all), opts.vm);
po::notify(vm);
--------

Finally, `CommandLineOptions` has functions to check the validity of each
parameter.

[[reference.StoppingCriterion]]
=== StoppingCriterion

A `StoppingCriterion` takes several values related to the iteration, namely
the time passed, the number of outer iterations, the current residuum and
the norm of the right-hand side, and decides whether it is time to stop or not.

There are several primities such as `CheckRelativeResiduum` or `CheckWalltime`
that may be arbitrarily combined using boolean logic.

It is simplest to employ the factory for producing such a combined stopping
criterion. It creates the instance from a simple string as follows.

[source,{basebackend@docbook:C++:cpp}]
------------
#include "Minimizations/Minimizers/StoppingCriteria/StoppingArguments.hpp"
#include "Minimizations/Minimizers/StoppingCriteria/StoppingCriteriaFactory.hpp"
#include "Minimizations/Minimizers/StoppingCriteria/StoppingCriterion.hpp"

StoppingArguments args;
args.setMaxIterations(100);

StoppingCriterion::ptr_t criterion = StoppingCriteriaFactory::create(
  "MaxIterationCount || DivergentResiduum",
  args
  )
------------

This will stop either after 100 iterations or when the residuum diverges more
than three times (i.e. increases instead of decreases).

See the `StoppingCriteriaFactory::StoppingCriteriaFactory()` for a list of all
known criterion and boolean operators (they are the familar ones from cpp).

[[reference.Solvers]]
=== Solvers

The general interface to all solvers is defined in `FeasibilityProblem`. It is
basically simply a functor, i.e. having a single `operator()` function that
executes the solving.

There are some convenience functions such as `getName()` which returns a human
readable name for output purposes. `clear()` and `finish()` are used when doing
split feasibility problems with multiple iterations.

Then we have several specific solvers which we discuss each in turn:

[[reference.solvers.InverseProblemSolver]]
==== InverseProblemSolver

The `InverseProblemSolver` class takes an inverse problem and applies a
minimizer method. Additionally, it connects with a `Database` class to write
iteration-specific information to that. This allows to check on the quality of
the iteration process lateron.

The parameters that control the manner of the solving, e.g., the minimizer
method and its options, are given using a `CommandLineOptions` instance.

[[reference.solvers.RangeProjectionSolver]]
==== RangeProjectionSolver

The `RangeProjectionSolver` class directly takes a matrix and a right-hand side
and constructs internal spaces for the projection depending on the given
options in the `CommandLineOptions` class. It is very similar to an
`InverseProblemSolver`.

[[reference.solvers.AuxiliaryConstraints]]
==== AuxiliaryConstraints

An `AuxiliaryConstraints` is a functor using a `SpaceElement` that enforces a
certain restriction directly on the element. E.g., `NonnegativeConstraint` will
project the vector onto the positive orthant, i.e. all negative components
become zero.

They are used in the context of `SplitFeasibilitySolvers`.

These constraints can be combined using boolean *AND*. Let us give an example
where we use the `AuxiliaryConstraintsFactory`

[source,{basebackend@docbook:C++:cpp}]
------------
#include "Solvers/AuxiliaryConstraints/AuxiliaryConstraintsFactory.hpp"

// create a single non-negative criterion
AuxiliaryConstraints::ptr_t nonneg_criterion =
  AuxiliaryConstraintsFactory::createCriterion(
    AuxiliaryConstraintsFactory::Nonnegative);
AuxiliaryConstraints::ptr_t unit_criterion =
  AuxiliaryConstraintsFactory::createCriterion(
    AuxiliaryConstraintsFactory::Unity);

// create a combination of non-negative and unit
AuxiliaryConstraints::ptr_t combined_criterion =
AuxiliaryConstraintsFactory::createCombination(
      AuxiliaryConstraintsFactory::Combination_AND,
      nonneg_criterion, unit_criterion);
------------

TIP: This can be done directly from a string "Nonnegative && Unity" using `AuxiliaryConstraintsFactory::create()`.

[[reference.solvers.SplitFeasibilitySolver]]
==== SplitFeasibilitySolver

A `SplitFeasibilitySolver` is a queue for a number of `FeasibilityProblem` or
`AuxiliaryConstraints`.
They are registered with this queue by using `registerFeasibilityProblem()` and
`registerAuxiliaryConstraints()`, respectively.

The problems are each solved approximately in turn. The queue is repeated over
for as many *loops* as desired or until a given `StoppingCriterion` returns
true.

These split feasibility problems are employed in the context of matrix
factorization but can also be used in inverse problems when additional
constraints apart from the minimum-norm solution requirement need to be
enforced.
