////
#  Project: BASSO - BAnach Sequential Subspace Optimizer
#  Description: C++ library for solving optimization problems in Banach spaces
#  Copyright (C)  2016-2019 Frederik Heber. All rights reserved.
#
#
#    This file is part of the BASSO library.
#
#     BASSO is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 2 of the License, or
#     (at your option) any later version.
#
#     BASSO is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with BASSO.  If not, see <http://www.gnu.org/licenses/>.
#
////

[[introduction]]
Introduction
------------

[[introduction.needtoknow]]
Before you start
~~~~~~~~~~~~~~~~

In the following we assume that you, the reader, has a general
familiarity with optimization methods. You should be very well familiar with
linear systems of equations and be aware of issues when they are over- oder
under-determined, and the basics of inverse problems. You should know what a
Tikhonov-Philips functional is, how this can be solved numerically using the
Landweber method. You should be familiar with Hilbert spaces and know the
principal differences to more general Banach spaces.

If you are _not_ familiar with the above terminology, then we recommend an
introductory book to regularization methods such as <<Schuster2012>>. However,
a small introduction is also given in <<background>>.

If you are generally interested in the mathematical background of Banach spaces,
Bregman distances and so on, we recommend <<Cioranescu1990>>.

[[introduction.whatis]]
What is BASSO?
~~~~~~~~~~~~~~

BASSO is a library written in pass:[C++] to solve inverse problems in Banach spaces.
It is both an interface in pass:[C++] and in Python3.
Moreover, it comes with a bunch of tools that allow to address certain kind of
inverse problems, e.g. inverse problems of ill-conditioned matrices, matrix
factorization and certain specific 'classical' inverse problems such as
Computerized Tomography. These also may serve as examples how to use the
library.

We stress that the library's interface is written from the viewpoint of the
mathematical objects encountered in this problem setup, i.e. there are classes
that model vector spaces, normed vector spaces and elements thereof. There are
mappings between spaces and functions working on elements from specific spaces.
In order to put these to their best use it is recommended to have a background
of the mathematical concepts involved.

Therefore, it is not aimed at users who simply wish to call a function to solve
a certain type of inverse problem although it comes with a few helper programs
that might do the job. At its core it is a library that allows to solve an
inverse problem if ones possesses some knowledge of the mathematical
underpinning and wishes to see this at work. Extensive care has been taken such
that the library automatically prevents mishaps in the tool development such as
using vectors from the "wrong" space, use mappings in the wrong way, and so on.

[[introduction.installation]]
Installation
~~~~~~~~~~~~

In the following we explain the installation procedure to get
BASSO up and running.

[[introduction.installation.requirements]]
Installation requirements
^^^^^^^^^^^^^^^^^^^^^^^^^

This program suite is implemented using pass:[C++] and Python3 and the
development mainly focused on Linux (development machine used Ubuntu 14.04 and
16.04). At the moment other operating systems are not supported but may still
work. Note that the build system depends on CMake which principally allows to
generate configuration files also for Integrated Developer Environments popular
on Windows.

It has the following non-trivial dependencies:

* link:https://cmake.org/[CMake]
* link:https://www.gnu.org/software/gsl/[GSL]
* link:https://eigen.tuxfamily.org[Eigen]: version 3.2.8 or later
* link:https://cppunit.sourceforge.net/[CppUnit]
* link:http://boost.org/[boost]: version 1.61 or later
* link:https://pocoproject.org/[poco]: optionally used for writing sqlite3 +
database

Note that these packages can be easily installed using either
the repository tool (using some linux distribution such as Ubuntu), e.g.

---------------
sudo apt install cmake
---------------

Moreover, the following packages are not ultimately required but
examples or tests may depend on them:

* link:https://www.sqlite.org[sqlite3]
* link:https://www.gnu.org/s/gawk/manual/gawk.html[gawk]

The documentation is written in link:https://asciidoc.org/[AsciiDoc] and
link:http://www.doxygen.nl/[doxygen] and requires a suitable package to compile
to HTML or create a PDF, e.g., using dblatex

* link:https://www.doxygen.nl/[doxygen]
* link:https://www.methods.co.nz/asciidoc/userguide.html[asciidoc]
* link:http://dblatex.sourceforge.net/[dblatex]

[[introduction.installation.procedure]]
Installation procedure
^^^^^^^^^^^^^^^^^^^^^^

Installation comes in two flavors: either via a tarball or a cloned repository.

The tarball releases are recommended if you only plan to use BASSO and do not
intend modifying its code. If, however, you need to use a development branch,
then you have to clone from the repository.

In general, this package is compiled and installed via CMake. Please refer to
the text `README` file that is included in the tarball.

[[introduction.installation.procedure.tarball]]
==== From Tarball

Unpack the archive, assuming its suffix is `.gz`.

---------------
tar -zxvf basso-${revnumber}.tar.gz
---------------

[[introduction.installation.repository]]
==== From cloned repository

In case you are cloning the repository,

---------------
git clone https://github.com/FrederikHeber/BASSO.git
---------------

then you are in the same position as having unpacked the release tarball.

Enter the directory

---------------
cd basso
---------------

Continue then in section link:#configure_make_install[Configure, make, install].

[[introduction.installation.configure_make_install]]
==== Configure, make, make install

Next, we recommend to build the toolkit not in the source folder but in an
extra folder, e.g., ``build64''. This is called an _out-of-source_ build. It
prevents cluttering of the source folder. Naturally, you may pick any name
(and actually any location on your computer) as you see fit.

---------------
mkdir build64
cd build64
cmake ..
make
make install
---------------

[IMPORTANT]
=========================
There are many options to control `cmake`, e.g. giving a prefix to set the
installation location, directing to unusually installed boost or eigen
versions, and many more.

For more details on these options with `cmake` please take a look at the
up-to-date README` file
=========================

[NOTE]
=========================
We recommend executing (after `make install` was run)

---------------
make -j4 test
---------------

additionally. This will execute every test on the extensive testsuite
and report any errors. None should fail. If all fail, a possible cause
might be a not working tensorflow installation. If some fail, please
contact the author.
The extra argument *-j4* instructs +make+ to use four threads in parallel for
testing. Use as many as you have cores on your machine.
=========================

[[introduction.license]]
License
~~~~~~~

As long as no other license statement is given,
ThermodynamicAnalyticsToolkit is free for use under the GNU Public
License (GPL) Version 2 (see https://www.gnu.org/licenses/gpl-2.0.en.html for
full text).

[[introduction.disclaimer]]
Disclaimer
~~~~~~~~~~

[quote, section 11 of the GPLv2 license, https://www.gnu.org/licenses/gpl-2.0.en.html]
____
Because the program is licensed free of charge, there is not warranty
for the program, to the extent permitted by applicable law. Except when
otherwise stated in writing in the copyright holders and/or other
parties provide the program "as is" without warranty of any kind, either
expressed or implied. Including, but not limited to, the implied
warranties of merchantability and fitness for a particular purpose. The
entire risk as to the quality and performance of the program is with
you. Should the program prove defective, you assume the cost of all
necessary servicing, repair, or correction.
____


[[introduction.feedback]]
Feedback
~~~~~~~~

If you encounter any bugs, errors, or would like to submit feature request,
please open an issue at link:{Website}[GitHub] or write to mailto:[{Email}].
The authors are especially thankful for any description of all related events
prior to occurrence of the error and auxiliary files. More explicitly, the
*following information is crucial* in enabling assistance:

- *operating system* and version, e.g., Ubuntu 16.04
- *BASSO version* (or respective branch on GitHub), e.g., BASSO 1.10
- steps that lead to the error, possibly with *sample pass:[C++]/Python code*

Please mind sensible space restrictions of email attachments.
