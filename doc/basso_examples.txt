Examples
--------

We have implemented a number of typical inverse problems using BASSO. These are command-line programs that take all required parameters as arguments using the  `boost::program_options` library. See the `Examples` folder and all subfolders therein.

Note that basically all examples come with an additional program `...Configurator` that writes command-line options into a file. This is to allow reproducible runs where all employed options can be inspected at any time for a given result. At any later point in time you can easily see what options produced the respective output files by looking at this file.

=== BASSO

The main program which solves any kind of inverse problem given in the form of two files containing the matrix and the right-hand sie vector has the same name as the library itself, namely *BASSO*.

In the following we use it to solve a simple problem which has been investigated in link:#Schoepfer2006[[Schoepfer2006]]: Determine the point on a line (in two dimensions) which has minimal distance to the origin in the latexmath:[\ell_p]-norm.

[latexmath]
+++++++++++
A = \begin{pmatrix} 2 & 1 \\ 2 & 1 \end{pmatrix}, \quad y = \begin{pmatrix} 2 \\ 2 \end{pmatrix}
+++++++++++

We encode the *matrix* A and the *vector* y in the files 'matrix.m' and 'vector.m', respectively.

NOTE: BASSO uses the _MatLab/Octave file format_ with its typical '.m' suffix in its file formats. This allows to use Octave to easily create, read, and write matrix or vectors from and to files. See link:https://octave.org/doc/v4.2.1/Simple-File-I_002fO.html[Simple File I/O] for details. The file parsing is handled by the `MatrixIO` class, see link:#MatrixIO[].

[source,bash]
-------------
include::examples/basso.sh[]
-------------

In this call of 'Basso' we use the Landweber with latexmath:[${\cal X}$] and latexmath:[${\cal Y}$] being latexmath:[\ell_2]-spaces. We terminate when the residual is less than 1e-4 and use at most 50 iterations. All information on the iterations is written to an SQLite database file 'Landweber1.db'. The solution, i.e. the point closest to the origin on the line described by latexmath:[$A$] is written to 'straightline1.m'.

=== Gravity

In the very nice book link:#Hansen2010[[Hansen2010]] an example of finding the gravitational constant is given. We have implemented this example in the context of BASSO.

[quote, Discrete Inverse Problems - Insight and Algorithms, P.C. Hansen]
_____
An unknown mass distribution with density f(t) is located at depth d below the surface, from 0 to 1 on the t axis [shown in Figure 2.1]. We assume there is not mass outside the source, which produces a gravity field everywhere. At the surface along the s axis (see the figure) from 0 to 1, we measure the vertical component of the gravity field, which we refer to as g(s).
_____

This is the problem we have to solve: There is a one-dimensional manifold with "mass" at some distance d to our measurement device. At the surface -- the one dimensional manifold where our device sits -- we feel the combined effect of the mass on the whole manifold but always diminished by the distance to the respective point mass at f(t). We have information only of the measured gravity field g(s) and now want to deduce the mass distribution f(t). This is our inverse problem: We have the cause. Now we want to know what's the source of it.

What we need is a equation that relates the two: This is known by the name of Fredholm integral equation of the first kind, see link:#Hansen2010[[Hansen2010]].

[latexmath]
+++++++++++
\int_0^1 K(s,t)  f(t) dt = g(s), \quad 0 \leq s \leq 1
+++++++++++

latexmath:[K(s,t)] here is called the "kernel". If the kernel is linear and we discretize the x axis by using a set of equidistant points along it, we obtain a matrix and the equation becomes the typical inverse problems that we know already: latexmath:[Ax=y].

[latexmath]
+++++++++++
K(s,t) = \frac{d} {\bigl (d^2+(s-t)^2 \bigr)^{\tfrac 3 2}}
+++++++++++

This equation for the kernel results from knowing that the magnitude of the gravity field along s behaves as latexmath:[f(t)dt/r^2], where latexmath:[r = \sqrt{d^2 + (s-t)^2}] is the distance between the source point s and the field point t.

[source,bash]
-------------
include::examples/gravity.sh[]
-------------

=== ComputerTomography

In computerized tomography the inverse problem is the reconstruction of the
inside of an object from projections. Measurements are for example obtained by
passing radiation through a body, whereby their intensity is diminished,
proportional to the passed length and density latexmath:[$f(x)$] of the body:
latexmath:[$[0,1]^2 \rightarrow R^+_0$]. This decrease is measured over a
latexmath:[$a$] angles and latexmath:[$s$] shifts of radiation source and detectors.
This measurement matrix is usually called *sinogram*. Again, we follow
link:#Hansen2010[[Hansen2010, ยง7.7]].

In (2D) tomography much depends on how the measurement is obtained. Rays might
pass through the body in parallel or in fan-like formation. This depends on
the setup of the detectors. If there is just a single, point-like detector
that is rotated in conjunction with the radiation source. The detector might
also be spread out, detecting along several small line segments.

In our case we assume single rays, these are suitable parametrized. When the
radiation passes through an object, the effect on its intensity is described
by the Lambert-Beer law, latexmath:[$dI = I_0 \exp{ f(x) dx}$]. Given some
initial intensity latexmath:[$I_0$] it is diminished when travelling
latexmath:[$dx$] through the body latexmath:[$f(x)$] by latexmath:[$dI$].

This can be written as the famous *Radon transform*,

[latexmath]
+++++++++++
b_i = \int_{-\infty}^{\infty} f(t^i(\tau)) d\tau,
+++++++++++

where i enumerates all rays passed through the body and latexmath:[$t^i$] is the
respective parametrization in 2D, latexmath:[$t^i = t^{i,0} + \tau d^i$] with
the direction of the ray d and latexmath:[$i=s \cdot a$] rays in total.

The problem is typically discretized in a pixel basis and for setting up the
Radon matrix we need to count the length of the ray passing through each of
the pixels.

NOTE: The pixels in 2D are vectorized and the matrix is over all pixels and
over all grid points of the body's density latexmath:[$f(x)$].

Eventually, we obtain a matrix equation: latexmath:[$b_i = \sum_j a_{ij} x_j$].

Again, this is the inverse problem that we need to solve.

The example program contained with BASSO is called 'ComputerTomography'.

[source,bash]
-------------
include::examples/computertomography.sh[]
-------------

For a problem with a noisy right-hand side we have the following example.

[source,bash]
-------------
include::examples/computertomography_with_noise.sh[]
-------------

=== MatrixFactorizer

One last and more complicated program that has been investigated in the course
of the BMBF funded project link:https://www.math.uni-sb.de/hypermath/[HYPERMATH]
is to matrix factorization as two alternating inverse problems.

In HYPERMATH we looked at hyperspectral images. These are images that contain
not only three colors but thousands of different channels. These images were
taken by many different measurement methods: Near-Infrared Spectroscopy (NIR),
Matrix Assisted Laser Deposition and Imaging (MALDI), Raman spectroscopy or
Spark Optical Emission Spectroscopy (OES). The channels were either truly
electromagnetic channels (NIR, Raman), particles masses (MALDI) or elemental
abundances (OES). The images were 2D measurement grids of different objects.

Hyperspectral images are typically very large. 1e6 to 1e8 number of pixels
and 1e3 to 1e5 number of channels are typically encountered, causing up to
1e12 degrees of freedom to be stored. Hence, these are big data.

One central problem is therefore storage. The central idea of the HYPERMATH
project is to use matrix factorization. The measurements are seen as a large
matrix where one dimension is the number of pixels and the other is the number
of channels. The underlying assumption is that the measurement is caused by
the linear superposition of a few *endmembers*. For example, in Raman
spectroscopy biological tissue is investigated. Spectrographical patterns
are caused by the molecules that make up the tissue.

(Non-negative) Matrix factorization will then decouple the superimposed effects
of all these endmembers. It splits the measurement matrix A into two factors
K and X, where K contains relations from channels to endmembers and X from
endmembers to pixels, latexmath:[$A = K \cdot X$].

If the number of reconstructed endmembers is much smaller than the number of
pixels or channels, then the storage requirement of both K and X is much
smaller than of the original matrix A.

This problem can be written as two different inverse problems: First, consider
each row in X and each row in A. We obtain latexmath:[$A_i = K X_i$], where K is
the matrix to formally invert. The other way round, looking at rows, we obtain
latexmath:[$A_j = K_j X$]. Now, X is the matrix to invert.

Next, we perform an alternating least squares minimization, where each inverse
problem is solved in turn for a few iterations. This will converge to the
two factors we are looking for.

Moreover, this problem can be seen as a split feasibility problem, where
each constraint is addressed one by the other. This allows to add further
constrains on the factors K and X. For example, row sums might need to be
unity or similar.

In the example program 'MatrixFactorizer' this method is implemented.

[source,bash]
-------------
include::examples/matrixfactorizer.sh[]
-------------

Helper programs
---------------

BASSO comes with several small helper programs that aid in setting up problems,
perturbing right hand sides or projecting onto the range of the given matrix.

=== NoiseAdder

'NoiseAdder' adds a specific amount of white noise to a given vector.

[source,bash]
-------------
include::examples/noiseadder.sh[]
-------------

=== RangeProjector

'RangeProjector' projects onto the range of a matrix. This is again an inverse
problem. The program however sets it up as a split feasibility problem to allow
additional constraints to be fulfilled in the projection, e.g. non-negativity.

[source,bash]
-------------
include::examples/rangeprojector.sh[]
-------------

=== MatrixToPNG

'MatrixToPNG' converts a vector into a PNG image file. Although images are 2D
and therefore one would expect a matrix. In computerized tomography, the image
information is vectorized. Hence, this program expects a vector.

It supports an arbitrary color table, e.g., *blackwhite* or *bluegreenred*.

The image can be automatically flipped or mirrored.

[source,bash]
-------------
include::examples/matrixtopng.sh[]
-------------

=== RadonMatrixWriter

'RadonMatrixWriter' writes the Radon transform discretized in a pixel basis to
a file such that it forms the matrix in the inverse problem of 2D computerized
tomography.

[source,bash]
-------------
include::examples/radonmatrixwriter.sh[]
-------------
