libBasso - BAnach Sequential Subspace Optimization library
==========================================================

Basso is a library to minimize a constrained functional in a Banach space
setting. It is an extension of the sequentional subspace optimization
method by Narkiss by multiple search directions.

Installation instructions:
--------------------------

Basso depends on the following packages:
 * cmake - make utility for checking prerequisites
 * GSL - GNU Scientific library for function minimization
 * Eigen - C++ library for linear algebra
 * CppUnit - C++ library for unit testing
 * boost - almost standard library (we require 1.54 due to logging)
 * poco - poco is used (optionally) to write iteration information to
   a sqlite3 database

... on Ubuntu
-------------
Eigen and CppUnit packages and reside in standard paths, hence we have to do nothing

It is advised to compile the source in a distinct build directory, e.g. in a subfolder "build64". This is referred to as out-of-source build. To prepare the compilation, call cmake then as follows:

cmake ..

If additionally boost libraries do not reside in standard folders, such as
/usr/include, /usr/lib ... but in ~/packages/boost the following options might help:

cmake -DBoost_NO_SYSTEM_PATHS=ON -DBOOST_ROOT=~/packages/boost/

Note that boost libraries should have been compiled with "layout=tagged". Otherwise, FindBoost.cmake can not find the libraries and headers.

To allow for debugging, you might futher add "-DBoost_DEBUG=ON".

In general, to compile in debugging information add "-DCMAKE_BUILD_TYPE=Debug", to compile without use "-DCMAKE_BUILD_TYPE=Release".

Documentation
-------------

To generate the doxygen documenation, you use

make doc

and the generated html pages can the be found under src/Documentation/doc/html.

Timing Measurements
-------------------

Add

-DUSE_TIMINGS=true

to activate the timing measurements of each part of the algorithm.


Special purpose diff
--------------------

Result files are compared against stored files in the regression tests using
'diff' by default. 'diff' compares literally and does not know about numerical
(im)precision. Hence, a different diff, such as ndiff, may be specified via

-DUSE_NDIFF=ON -DNDIFF_PATH=<path to ndiff's bin folder> 
-DNDIFF_OPTIONS:LIST="-relerr;1e-4;-q"

to activate comparison of outputfiles with ndiff. The semicolons ";" are
required to ensure that we have a list of options (otherwise they are presented
to ndiff as single string which will not work).

Note: There is another ndiff program used to compare XML output files from
nmap. Hence, the path NDIFF_PATH to ndiff's bin folder should always be given.


Various Tests
-------------

Various compile switches exist to enable more testing of the algorithm.

TRUESOLUTION			Calculates true solution in inner MatrixFactorizer loop to calculate Bregman distance and check convergence (see src/MatrixFactorizer.cpp).
FULLMATRIXNORM			Calculates operator norm via SVD instead of matrix norm (takes O(N^3) !) (cmake define or compile switch)


2015-03-18 Frederik Heber
